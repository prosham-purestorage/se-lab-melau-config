# Makefile for Subscriber Repository
# Copy this file to your repository root as 'Makefile' after adding se-lab-melau-config as a submodule

.PHONY: config install clean help update-submodule update force-update propose-changes check-changes

# Default target - show help
help:
	@echo "Available targets:"
	@echo "  install         - Set up dependencies and virtual environment"
	@echo "  config          - Generate all configuration files (env, json, ps1)"
	@echo "  update          - Update submodule and regenerate config files"
	@echo "  clean           - Remove generated configuration files"
	@echo "  update-submodule - Update config submodule (DISCARDS local changes)"
	@echo "  force-update    - Alias for update-submodule"
	@echo ""
	@echo "Configuration Change Workflow:"
	@echo "  check-changes   - Show what config changes you've made locally"
	@echo "  propose-changes - Create a Pull Request with your config changes"
	@echo ""
	@echo "‚ö†Ô∏è  IMPORTANT: The shared config is AUTHORITATIVE"
	@echo "   Local changes to config/ files will be DISCARDED on update"
	@echo "   Use 'propose-changes' to submit changes for review"
	@echo ""
	@echo "Prerequisites:"
	@echo "  1. Add se-lab-melau-config as a git submodule:"
	@echo "     git submodule add <repo-url> config"
	@echo "  2. Ensure you have the decryption key at ~/.purestorage/se-lab-melau.key"
	@echo ""
	@echo "Usage:"
	@echo "  make install  # Run once to set up environment"
	@echo "  make config   # Generate config files"
	@echo "  make update   # Get latest config changes and regenerate files"
	@echo ""
	@echo "Workflow for getting latest changes:"
	@echo "  make update   # This will:"
	@echo "                #   1. DISCARD any local config changes"
	@echo "                #   2. Pull latest authoritative config"
	@echo "                #   3. Regenerate all config files"
	@echo "                #   4. Apply secure permissions"
	@echo ""
	@echo "Workflow for proposing config changes:"
	@echo "  1. Edit config files (lab-config.yml, etc.)"
	@echo "  2. make check-changes    # Review your changes"
	@echo "  3. make propose-changes  # Create a Pull Request"
	@echo "  4. Wait for admin approval and merge"
	@echo "  5. make update           # Get approved changes back"
	@echo ""
	@echo "Note: Never edit files in config/ unless proposing changes!"

# Install dependencies and set up virtual environment
install:
	@echo "Setting up virtual environment and dependencies..."
	python3 config/scripts/subscriber/install.py

# Generate all configuration files
config: install
	@echo "Generating configuration files..."
	mkdir -p export
	python3 config/scripts/subscriber/update.py --type env --output export/lab-config.env --config config/lab-config.yml --secrets config/secrets.yml.encrypted
	python3 config/scripts/subscriber/update.py --type json --output export/lab-config.json --config config/lab-config.yml --secrets config/secrets.yml.encrypted
	python3 config/scripts/subscriber/update.py --type ps1 --output export/lab-config.ps1 --config config/lab-config.yml --secrets config/secrets.yml.encrypted
	@echo ""
	@echo "‚úì Configuration files generated in export/ directory:"
	@echo "  - export/lab-config.env  (shell environment variables)"
	@echo "  - export/lab-config.json (JSON format)"
	@echo "  - export/lab-config.ps1  (PowerShell variables)"
	@echo ""
	@echo "All files have secure permissions (mode 400 - read-only for owner)"

# Clean generated configuration files
clean:
	@echo "Cleaning generated configuration files..."
	rm -f export/lab-config.env export/lab-config.json export/lab-config.ps1
	@echo "‚úì Configuration files removed"

# Update submodule to latest version (AUTHORITATIVE - discards local changes)
update-submodule:
	@echo "Updating config submodule to latest version..."
	@echo "‚ö†Ô∏è  WARNING: This will discard any local changes in the config submodule"
	@echo "The shared config is AUTHORITATIVE - local changes are not preserved"
	@echo ""
	@echo "Resetting config to match remote..."
	@cd config && git reset --hard HEAD && git clean -fd
	@git submodule update --remote config
	@echo "‚úì Submodule updated to latest authoritative version"

# Force update (same as update-submodule for clarity)
force-update: update-submodule
	@echo "‚úì Force update complete"

# Update submodule and regenerate config files
update: update-submodule config
	@echo "‚úì Update complete - submodule and config files are now current"

# Check what configuration changes have been made locally
check-changes:
	@echo "üìã Checking for local configuration changes..."
	@if [ -n "$$(cd config && git status --porcelain)" ]; then \
		echo "üìù Local changes detected:"; \
		echo ""; \
		cd config && git status --short; \
		echo ""; \
		echo "üìä Detailed differences:"; \
		cd config && git diff HEAD; \
		echo ""; \
		echo "üí° To propose these changes: make propose-changes"; \
	else \
		echo "‚úÖ No local changes detected"; \
		echo "üí° Make your changes to config files, then run 'make check-changes'"; \
	fi

# Propose configuration changes via Pull Request
propose-changes:
	@echo "üöÄ Proposing Configuration Changes"
	@echo "=================================="
	@echo ""
	@# Check if there are changes to propose
	@if [ -z "$$(cd config && git status --porcelain)" ]; then \
		echo "‚ùå No local changes detected to propose"; \
		echo "üí° Make changes to config files first, then run this command"; \
		exit 1; \
	fi
	@echo "üìù Local changes detected:"
	@cd config && git status --short
	@echo ""
	@# Get information for the PR
	@read -p "üìã Enter a title for your config changes: " title; \
	read -p "üìÑ Enter a description of your changes: " description; \
	subscriber_name=$$(basename $$(pwd)); \
	branch_name="config-update-$$subscriber_name-$$(date +%Y%m%d-%H%M%S)"; \
	echo ""; \
	echo "üîß Creating branch: $$branch_name"; \
	cd config && git checkout -b "$$branch_name"; \
	echo ""; \
	echo "üíæ Committing changes..."; \
	cd config && git add .; \
	cd config && git commit -m "Config update from $$subscriber_name: $$title" -m "$$description" -m "Proposed by: $$subscriber_name repository" -m "Timestamp: $$(date)"; \
	echo ""; \
	echo "üöÄ Pushing branch to remote..."; \
	cd config && git push origin "$$branch_name"; \
	echo ""; \
	echo "‚úÖ Configuration changes proposed successfully!"; \
	echo ""; \
	echo "üìã Next steps:"; \
	echo "  1. Go to the config repository on GitHub"; \
	echo "  2. You should see a prompt to create a Pull Request"; \
	echo "  3. Or manually create a PR from branch: $$branch_name"; \
	echo "  4. Once approved and merged, run 'make update' to get the changes back"; \
	echo ""; \
	echo "üîÑ Returning to main branch..."; \
	cd config && git checkout main
