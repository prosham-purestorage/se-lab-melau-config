# Makefile for Subscriber Repository
# Copy this file to your repository root as 'Makefile' after adding se-lab-melau-config as a submodule

.PHONY: config install clean help update-submodule update show-diff reset-config stash-update

# Default target - show help
help:
	@echo "Available targets:"
	@echo "  install         - Set up dependencies and virtual environment"
	@echo "  config          - Generate all configuration files (env, json, ps1)"
	@echo "  update          - Update submodule and regenerate config files"
	@echo "  clean           - Remove generated configuration files"
	@echo "  update-submodule - Update config submodule to latest version"
	@echo ""
	@echo "Conflict resolution targets:"
	@echo "  show-diff       - Show local changes that conflict with remote"
	@echo "  reset-config    - Discard local changes and update (DESTRUCTIVE)"
	@echo "  stash-update    - Stash local changes, update, then restore"
	@echo ""
	@echo "Prerequisites:"
	@echo "  1. Add se-lab-melau-config as a git submodule:"
	@echo "     git submodule add <repo-url> config"
	@echo "  2. Ensure you have the decryption key at ~/.purestorage/se-lab-melau.key"
	@echo ""
	@echo "Usage:"
	@echo "  make install  # Run once to set up environment"
	@echo "  make config   # Generate config files"
	@echo "  make update   # Get latest config changes and regenerate files"
	@echo ""
	@echo "Workflow for getting latest changes:"
	@echo "  make update   # This will:"
	@echo "                #   1. Pull latest config submodule changes"
	@echo "                #   2. Regenerate all config files"
	@echo "                #   3. Apply secure permissions"

# Install dependencies and set up virtual environment
install:
	@echo "Setting up virtual environment and dependencies..."
	python3 config/scripts/subscriber/install.py

# Generate all configuration files
config: install
	@echo "Generating configuration files..."
	mkdir -p export
	python3 config/scripts/subscriber/update.py --type env --output export/lab-config.env --config config/lab-config.yml --secrets config/secrets.yml.encrypted
	python3 config/scripts/subscriber/update.py --type json --output export/lab-config.json --config config/lab-config.yml --secrets config/secrets.yml.encrypted
	python3 config/scripts/subscriber/update.py --type ps1 --output export/lab-config.ps1 --config config/lab-config.yml --secrets config/secrets.yml.encrypted
	@echo ""
	@echo "‚úì Configuration files generated in export/ directory:"
	@echo "  - export/lab-config.env  (shell environment variables)"
	@echo "  - export/lab-config.json (JSON format)"
	@echo "  - export/lab-config.ps1  (PowerShell variables)"
	@echo ""
	@echo "All files have secure permissions (mode 400 - read-only for owner)"

# Clean generated configuration files
clean:
	@echo "Cleaning generated configuration files..."
	rm -f export/lab-config.env export/lab-config.json export/lab-config.ps1
	@echo "‚úì Configuration files removed"

# Update submodule to latest version
update-submodule:
	@echo "Updating config submodule to latest version..."
	@echo "Checking for local changes in config submodule..."
	@if [ -n "$$(cd config && git status --porcelain)" ]; then \
		echo "‚ö†Ô∏è  Warning: Local changes detected in config submodule:"; \
		cd config && git status --short; \
		echo ""; \
		echo "Options to resolve:"; \
		echo "  make reset-config     # Discard local changes and update"; \
		echo "  make stash-update     # Stash changes, update, then restore"; \
		echo "  make show-diff        # Show what changes would be lost"; \
		echo ""; \
		echo "‚ùå Update aborted to prevent data loss"; \
		exit 1; \
	else \
		git submodule update --remote config; \
		echo "‚úì Submodule updated successfully"; \
	fi

# Show differences between local and remote config
show-diff:
	@echo "üìã Local changes that would be overwritten:"
	@cd config && git diff HEAD

# Reset config to match remote (DISCARDS local changes)
reset-config:
	@echo "‚ö†Ô∏è  This will DISCARD all local changes in the config submodule!"
	@read -p "Are you sure? (y/N): " confirm; \
	if [ "$$confirm" = "y" ] || [ "$$confirm" = "Y" ]; then \
		cd config && git reset --hard HEAD && git clean -fd; \
		git submodule update --remote config; \
		echo "‚úì Config reset and updated to latest version"; \
	else \
		echo "‚ùå Reset cancelled"; \
	fi

# Stash local changes, update, then restore
stash-update:
	@echo "üíæ Stashing local changes..."
	@cd config && git stash push -m "Auto-stash before submodule update $$(date)"
	@echo "üîÑ Updating submodule..."
	@git submodule update --remote config
	@echo "üì• Attempting to restore stashed changes..."
	@if cd config && git stash pop; then \
		echo "‚úì Update complete with local changes restored"; \
		echo "‚ö†Ô∏è  Please review for any merge conflicts"; \
	else \
		echo "‚ö†Ô∏è  Conflicts detected when restoring changes"; \
		echo "Your changes are safe in the stash. Use these commands:"; \
		echo "  cd config && git stash list"; \
		echo "  cd config && git stash show"; \
		echo "  cd config && git stash drop  # to discard stashed changes"; \
	fi

# Update submodule and regenerate config files
update: update-submodule config
	@echo "‚úì Update complete - submodule and config files are now current"
